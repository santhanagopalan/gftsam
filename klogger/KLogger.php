<?php

/*. require_module 'standard'; .*/
/*. require_module 'session'; .*/

/**
 * Finally, a light, permissions-checking logging class.
 *
 * Originally written for use with wpSearch
 *
 * Usage:
 * $log = new KLogger('/var/log/', KLogger::INFO);
 * $log->logInfo('Returned a million search results'); //Prints to the log file
 * $log->logFatal('Oh dear.'); //Prints to the log file
 * $log->logDebug('x = 5'); //Prints nothing due to current severity threshhold
 *
 * @author  Kenny Katzgrau <katzgrau@gmail.com>
 * @since   July 26, 2008 â€” Last update July 1, 2012
 * @link    http://codefury.net
 * @version 0.2.0
 */

/**
 * Class documentation
 */
class KLogger
{
    /**
     * Error severity, from low to high. From BSD syslog RFC, secion 4.1.1
     * @link http://www.faqs.org/rfcs/rfc3164.html
     */
    const EMERG  = 0;  // Emergency: system is unusable

    const ALERT  = 1;  // Alert: action must be taken immediately
    const CRIT   = 2;  // Critical: critical conditions
    const ERR    = 3;  // Error: error conditions
    const WARN   = 4;  // Warning: warning conditions
    const NOTICE = 5;  // Notice: normal but significant condition
    const INFO   = 6;  // Informational: informational messages
    const DEBUG  = 7;  // Debug: debug messages

    //custom logging level
    /**
     * Log nothing at all
     */
    const OFF    = 8;
    /**
     * Alias for CRIT
     * @deprecated
     */
    const FATAL  = 2;

    /**
     * Internal status codes
     */
    const STATUS_LOG_OPEN    = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED  = 3;

    /**
     * We need a default argument value in order to add the ability to easily
     * print out objects etc. But we can't use NULL, 0, FALSE, etc, because those
     * are often the values the developers will test for. So we'll make one up.
     */
    const NO_ARGUMENTS = 'KLogger::NO_ARGUMENTS';

    /**
     * Current status of the log file
     * @var integer
     */
    private $_logStatus         = self::STATUS_LOG_CLOSED;
    private $_jsonLogStatus  = self::STATUS_LOG_CLOSED;
    /**
     * Holds messages generated by the class
     * @var array
     */
    private $_messageQueue      = array();
    private $_jsonQueue = array();
    /**
     * Path to the log file
     * @var string
     */
    private $_logFilePath       = null;
    private  $_jsonLogFilePath = null;
    /**
     * Current minimum logging threshold
     * @var integer
     */
    private $_severityThreshold = self::INFO;
    /**
     * This holds the file handle for this instance's log file
     * @var resource
     */
    private $_fileHandle        = null;
    private $_jsonFileHandle = null; 

    /**
     * Standard messages produced by the class. Can be modified for il8n
     * @var array
     */
    private $_messages = array(
        //'writefail'   => 'The file exists, but could not be opened for writing. Check that appropriate permissions have been set.',
        'writefail'   => 'The file could not be written to. Check that appropriate permissions have been set.',
        'opensuccess' => 'The log file was opened successfully.',
        'openfail'    => 'The file could not be opened. Check permissions.',
    );

    /**
     * Default severity of log messages, if not specified
     * @var integer
     */
    private static $_defaultSeverity    = self::DEBUG;
    /**
     * Valid PHP date() format string for log timestamps
     * @var string
     */
    private static $_dateFormat         = 'Y-m-d G:i:s';
    /**
     * Octal notation for default permissions of the log file
     * @var integer
     */
    private static $_defaultPermissions = 0777;
    /**
     * Array of KLogger instances, part of Singleton pattern
     * @var array
     */
    private static $instances           = array();

    private static $FLOG_STRIP_PATH = "";
   
    /**
     * Class constructor
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return void
     */
    public function __construct($logDirectory, $severity)
    {
        $logDirectory = rtrim($logDirectory, '\\/');

        if ($severity === self::OFF) {
            return;
        }
        
        $this->_logFilePath = $logDirectory
            . DIRECTORY_SEPARATOR
            . 'log_'
            . date('Y-m-d')
            . '.txt';
        $this->_jsonLogFilePath = $logDirectory.DIRECTORY_SEPARATOR.'json_logs-'.date('Y-m-d').'.txt';
        
        $this->_severityThreshold = $severity;
        if (!file_exists($logDirectory)) {
		try{
			mkdir($logDirectory, self::$_defaultPermissions, true);
		}catch(Exception $e){
			error_log("Exception ". $e->__toString());
		}
        }
        
        if (file_exists($this->_logFilePath) && !is_writable($this->_logFilePath)) {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['writefail'];
            return;
        }
        if(file_exists($this->_jsonLogFilePath) && !is_writable($this->_jsonLogFilePath)) {
        	$this->_jsonLogStatus = self::STATUS_OPEN_FAILED;
        	$this->_jsonQueue[] = $this->_messages['writefail'];
        }

	try{
		if (($this->_fileHandle = fopen($this->_logFilePath, 'a')) !== FALSE ) {
		    if(substr(sprintf('%o', fileperms($this->_logFilePath)), -3)!=777){
		        chmod($this->_logFilePath, 0777);
		    }
			$this->_logStatus = self::STATUS_LOG_OPEN;
			$this->_messageQueue[] = $this->_messages['opensuccess'];
		} else {
			$this->_logStatus = self::STATUS_OPEN_FAILED;
			$this->_messageQueue[] = $this->_messages['openfail'];
		}
		if(($this->_jsonFileHandle = fopen($this->_jsonLogFilePath,'a'))!==FALSE) {
		    if(substr(sprintf('%o', fileperms($this->_jsonLogFilePath)), -3)!=777){
		        chmod($this->_jsonLogFilePath, 0777);
		    }
			$this->_jsonLogStatus = self::STATUS_LOG_OPEN;
			$this->_jsonQueue[] = $this->_messages['opensuccess'];
		} else {
			$this->_jsonLogStatus = self::STATUS_OPEN_FAILED;
			$this->_jsonQueue[] = $this->_messages['openfail'];
		}
	}catch(Exception $e){
		$this->_logStatus = self::STATUS_OPEN_FAILED;
		$this->_messageQueue[] = $this->_messages['openfail'];

		error_log("Exception ". $e->__toString());
	}

	//setup a default strip path
	    if( self::$FLOG_STRIP_PATH === "" ){
		    $webroot = (string)str_replace( "\\", "/", $_SERVER[ 'DOCUMENT_ROOT' ] );
		    self::$FLOG_STRIP_PATH = $webroot;
	    }

    }

    /**
     * Partially implements the Singleton pattern. Each $logDirectory gets one
     * instance.
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return mixed 
     */
    public static  function instance(/*. string .*/$logDirectory = null, /*. integer .*/$severity = 0)
    {
        if ($severity === null) {
            $severity = self::$_defaultSeverity;
        }
        
        if ($logDirectory === false) {
            if (count(self::$instances) > 0) {
                return current(self::$instances);
            } else {
                $logDirectory = dirname(__FILE__);
            }
        }

        if (in_array($logDirectory, self::$instances)) {
            return  self::$instances[$logDirectory];
        }

        self::$instances[$logDirectory] = new self($logDirectory, $severity);

        return self::$instances[$logDirectory];
    }


    /**
     * Class destructor
     *
     * @return void
     */
    public function __destruct()
    {
        if ($this->_fileHandle !=null && $this->_fileHandle !== FALSE) {
			try{
				fclose($this->_fileHandle);
			}catch(Exception $e){
				error_log("Exception ". $e->__toString());
			}
        }
        if($this->_jsonFileHandle !=null && $this->_jsonFileHandle !== FALSE) {
        	try{
        		fclose($this->_jsonFileHandle);
        	}catch(Exception $e){
        		error_log("Exception ". $e->__toString());
        	}
        }
    }

/**
 * @param int $level level value
 *
 * @return string
 */

    private function _getTimeLine($level)
    {
        $time = date(self::$_dateFormat);

        switch ($level) {
            case self::EMERG:
                return "$time - EMERG -->";
            case self::ALERT:
                return "$time - ALERT -->";
            case self::CRIT:
                return "$time - CRIT -->";
            //case self::FATAL: # FATAL is an alias of CRIT
            //   return "$time - FATAL -->";
            case self::NOTICE:
                return "$time - NOTICE -->";
            case self::INFO:
                return "$time - INFO -->";
            case self::WARN:
                return "$time - WARN -->";
            case self::DEBUG:
                return "$time - DEBUG -->";
            case self::ERR:
                return "$time - ERROR -->";
            default:
                return "$time - LOG -->";
        }
    }
    /**
     * @param int $level
     * @return string[string]
     */
    function getTimeLineArr($level) {
    	$time = date(self::$_dateFormat);
    	$log_level = "LOG";
    	switch ($level) {
    		case self::EMERG:
    			$log_level = "EMERG";
    			break;
    		case self::ALERT:
    			$log_level = "ALERT";
    			break;
    		case self::CRIT:
    			$log_level = "CRIT";
    			break;
    		case self::NOTICE:
    			$log_level = "NOTICE";
    			break;
    		case self::INFO:
    			$log_level = "INFO";
    			break;
    		case self::WARN:
    			$log_level = "WARN";
    			break;
    		case self::DEBUG:
    			$log_level = "DEBUG";
    			break;
    		case self::ERR:
    			$log_level = "ERROR";
    			break;
    		default:
    			$log_level = "LOG";
    			break;
    	}
    	return array('dateTime'=>$time,"logLevel"=>$log_level);
    }
/**
     * Writes a line to the log without prepending a status or timestamp
     *
     * @param string $line Line to write to the log
     * @param string $json_line
     * @return void
     */
    public function writeFreeFormLine($line,$json_line='')
    {
        if ($this->_jsonLogStatus == self::STATUS_LOG_OPEN && $this->_severityThreshold != self::OFF && $json_line!='') {
        	try{
        		if(fwrite($this->_jsonFileHandle, $json_line) === false) {
        			$this->_jsonQueue[] = $this->_messages['writefail'];
        		}
        	}catch(Exception  $e){
        		error_log("Exception ". $e->__toString());
        	}
        } else if ($this->_logStatus == self::STATUS_LOG_OPEN && $this->_severityThreshold != self::OFF) {
	        try{
	            if (fwrite($this->_fileHandle, $line) === false) {
	                $this->_messageQueue[] = $this->_messages['writefail'];
	            }
	        }catch(Exception  $e){
	            error_log("Exception ". $e->__toString());
	        }
    	}
    }


    /**
     * Writes a $line to the log with the given severity
     *
     * @param string  $line     Text to add to the log
     * @param integer $severity Severity level of log message (use constants)
     * @param mixed $vargs array of args
     * @param boolean $write_json_logs
     *
     * @return void
     */
    public function log($line, $severity, $vargs = self::NO_ARGUMENTS, $write_json_logs = false) //, $log_operation=0, $raw_request='', $raw_response='' )
    {
	    $session=session_id();
	    $status_arr = array();
        if ($this->_severityThreshold >= $severity) {
            $status = $this->_getTimeLine($severity);
            $status_arr = $this->getTimeLineArr($severity);

	    $stack = debug_backtrace();
	    //$class    = "";
	    //if( !empty( $stack[0]['class'] ) ){
	    //    $class  = $stack[0]['class']."::";
	    //}
	    //$function = "";
	    //if( !empty( $stack[1]['function'] ) ){
	    //$function = $stack[1]['function']; //caller function
	    //}

	    $stack_line     = $stack[1]['line'];
	    $file     = (string)$stack[1]['file'];
	    if(strpos($file,"/dbcon.php")>0 or strpos($file,"/ismile_util.php")>0){
		    $stack_line     = $stack[2]['line'];
		    $file     = (string)$stack[2]['file'];
	    }

	    $file = (string)str_replace( "\\", "/", $file );
	    $file = (string)str_replace( self::$FLOG_STRIP_PATH, "...", $file );
	    $stack_line = sprintf( "%4d", $stack_line);
	    $where = "$file:$stack_line:";

//END
            $json_line = '';
            if($write_json_logs) {
                $log_arr = array();
                $log_arr = array_merge($log_arr,$status_arr);
                $log_arr['sessionId'] = $session;
                $log_arr['fileName'] = $file;
                $log_arr['lineNumber'] = $stack_line;
                $log_arr['message'] = json_encode($line);
                if(is_array($vargs) and count($vargs)>0) {
                    $log_arr = array_merge($log_arr,$vargs);
                }
            	$json_line = json_encode($log_arr).PHP_EOL;
            }
            $line = "$status $session : $where".(is_array($line)?(json_encode($line)):$line);
            if($vargs !== self::NO_ARGUMENTS) {
                /* Print the passed object value */
                $line = $line . '; ' . var_export($vargs, true);
            }
            $this->writeFreeFormLine($line.PHP_EOL,$json_line);
        }
    }

    /**
     * Writes a $line to the log with a severity level of DEBUG
     *
     * @param string $line Information to log
     * @param mixed $vargs variable args
     * @param boolean $write_json_logs
     * @return void
     */
    public function logDebug($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::DEBUG, $vargs,$write_json_logs);
    }

    /**
     * Returns (and removes) the last message from the queue.
     * @return string
     */
    public function getMessage()
    {
        return (string)array_pop($this->_messageQueue);
    }

    /**
     * Returns the entire message queue (leaving it intact)
     * @return array
     */
    public function getMessages()
    {
        return $this->_messageQueue;
    }

    /**
     * Empties the message queue
     * @return void
     */
    public function clearMessages()
    {
        $this->_messageQueue = array();
    }

    /**
     * Sets the date format used by all instances of KLogger
     * 
     * @param string $dateFormat Valid format string for date()
     * 
     * @return void
     */
    public static function setDateFormat($dateFormat)
    {
        self::$_dateFormat = $dateFormat;
    }

    /**
     * Writes a $line to the log with a severity level of INFO. Any information
     * can be used here, or it could be used with E_STRICT errors
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logInfo($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = true)
    {
        $this->log($line, self::INFO, $vargs,$write_json_logs);
    }

    /**
     * Writes a $line to the log with a severity level of NOTICE. Generally
     * corresponds to E_STRICT, E_NOTICE, or E_USER_NOTICE errors
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logNotice($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::NOTICE, $vargs,$write_json_logs);
    }

    /**
     * Writes a $line to the log with a severity level of WARN. Generally
     * corresponds to E_WARNING, E_USER_WARNING, E_CORE_WARNING, or 
     * E_COMPILE_WARNING
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logWarn($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::WARN, $vargs,$write_json_logs);
    }

    /**
     * Writes a $line to the log with a severity level of ERR. Most likely used
     * with E_RECOVERABLE_ERROR
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logError($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::ERR, $vargs,$write_json_logs);
    }


    /**
     * Writes a $line to the log with a severity level of ALERT.
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logAlert($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::ALERT, $vargs,$write_json_logs);
    }

    /**
     * Writes a $line to the log with a severity level of CRIT.
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logCrit($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::CRIT, $vargs,$write_json_logs);
    }

    /**
     * Writes a $line to the log with a severity level of EMERG.
     *
     * @param string $line Information to log
     * @param mixed $vargs variable argument
     * @param boolean $write_json_logs
     * @return void
     */
    public function logEmerg($line, $vargs = self::NO_ARGUMENTS,$write_json_logs = false)
    {
        $this->log($line, self::EMERG, $vargs,$write_json_logs);
    }


    

}
